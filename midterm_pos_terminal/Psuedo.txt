IDEAS (not necessary to complete project, just nice to have):
1. have a "one of everything" option that shows we do have 12 items
2. have second window produce additional toppings so that console doesn't get flooded(?)
	- auto close when requested items selected

***Requirements along bottom of document***



Ice Cream Shop - Frosty Freeze

Root menu 1-7
displayandpick --  menuSelection
/////price vary by item/size
/////chooseSize
/////chooseVariety(flavor)
/////chooseToppings


Frosters* - blizzard eq
//////ingredients (list or array)
//////size
	public Froster(string flavor, string[] toppings)



Cones
/////cone type
/////dipped
/////bool sprinkles
/////size
	public (string flavor, string[] toppings)



Bowl
/////flavor
/////toppings
/////size



Shakes/Malts
//////bool malt
//////flavor
//////size



Sundays
/////ice cream flavor (array or list)
/////toppings
/////size



Specialty Sundays
//////Banna Split
//////Bunch-o-Brownie
//////S'More Please




Hot Food
	main
///////Fried Pickles(1 dipping)
///////Chicken Tendies(1 dipping)
///////Footlong
///////Burger(toppings)

	as a side - (one size)
///////Waffle Fries(1 dipping)
///////Onion Rings(1 dipping)

	basket
///////one main, one side, 2 dipping
	dipping
/////// 75 cents a peice
/////// 5$ for a bottle



Coupons
////////punch card
////////if order effectively equal to a basket{apply basket price}
////////basket + shake {lower than unit price}
////////


REQUIREMENTS:
1. Your solution must include some kind of a product class with a name, category, description, and price for each item.
2. 12 items minimum; they must be stored in a text file your program reads in. 
	- Example: 3 categories, 4 items/category - teammate gets 1 category
3. Present a menu to the user and let them choose an item (by number or letter).
	- Example: depending on item selected, could correspond to meal/coupon
		- if (a && b), then subtotal = subtotal + X.xx
4. Allow the user to choose a quantity for the item ordered.
	- Example: Method for conducting multiples, then call method when CR != "N"
5. Give the user a line total (item price * quantity).
6. Either through a menu or a separate question, allow them to re-display the menu and to complete the purchase.
7. Give the subtotal, sales tax, and grand total.
8. Use an Abstract Class or an Interface for the various payment methods. 
	- Include a separate class for each payment method that inherits from that parent class.
9. Ask for the payment type--cash, credit, or check.
	a. For cash, ask the amount tendered and provide change.
	b. For check, get the check number.
	c. For credit, get the credit card  number, expiration, and CVV.
10. At the end, display a receipt with all items ordered, subtotal, grand total, and appropriate payment info.
	- MAIN METHOD(?)
11. Return to the original menu for a new order. (Hint: you’ll want an array or List to keep track of what’s been ordered!)
12 .Optional enhancements: (Moderate) Include an option to add to the product list, which then outputs to the product file.